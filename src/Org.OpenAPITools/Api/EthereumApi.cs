/*
 * Gallop API
 *
 * Data and insights APIs, webooks, and dashboards enabling businesses to launch tokenized products in seconds.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@higallop.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEthereumApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Intraday Marketplace Floor Price by Collection
        /// </summary>
        /// <remarks>
        /// Returns intraday floor price for a given collection by marketplace
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionFloorPriceOHLCRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetEthCollectionFloorPriceOHLC(GetEthCollectionFloorPriceOHLCRequest getEthCollectionFloorPriceOHLCRequest = default(GetEthCollectionFloorPriceOHLCRequest), int operationIndex = 0);

        /// <summary>
        /// Intraday Marketplace Floor Price by Collection
        /// </summary>
        /// <remarks>
        /// Returns intraday floor price for a given collection by marketplace
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionFloorPriceOHLCRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetEthCollectionFloorPriceOHLCWithHttpInfo(GetEthCollectionFloorPriceOHLCRequest getEthCollectionFloorPriceOHLCRequest = default(GetEthCollectionFloorPriceOHLCRequest), int operationIndex = 0);
        /// <summary>
        /// Price Forecast by Collection
        /// </summary>
        /// <remarks>
        /// Returns price, return, and volatility forecast for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionForecastsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetEthCollectionForecasts(GetEthCollectionForecastsRequest getEthCollectionForecastsRequest = default(GetEthCollectionForecastsRequest), int operationIndex = 0);

        /// <summary>
        /// Price Forecast by Collection
        /// </summary>
        /// <remarks>
        /// Returns price, return, and volatility forecast for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionForecastsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetEthCollectionForecastsWithHttpInfo(GetEthCollectionForecastsRequest getEthCollectionForecastsRequest = default(GetEthCollectionForecastsRequest), int operationIndex = 0);
        /// <summary>
        /// Collection Floor Price and Listings Candlesticks
        /// </summary>
        /// <remarks>
        /// Returns historical floor price or more extensive open / high / floor / close candlesticks for collection listings at marketplaces at a selected time interval, as well as the number of active listings, the number of unique owners and the average age of open listings
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionListingsOHLCRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetEthCollectionListingsOHLC(GetEthCollectionListingsOHLCRequest getEthCollectionListingsOHLCRequest = default(GetEthCollectionListingsOHLCRequest), int operationIndex = 0);

        /// <summary>
        /// Collection Floor Price and Listings Candlesticks
        /// </summary>
        /// <remarks>
        /// Returns historical floor price or more extensive open / high / floor / close candlesticks for collection listings at marketplaces at a selected time interval, as well as the number of active listings, the number of unique owners and the average age of open listings
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionListingsOHLCRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetEthCollectionListingsOHLCWithHttpInfo(GetEthCollectionListingsOHLCRequest getEthCollectionListingsOHLCRequest = default(GetEthCollectionListingsOHLCRequest), int operationIndex = 0);
        /// <summary>
        /// Wallet Owners by Collection
        /// </summary>
        /// <remarks>
        /// Returns all wallet owners for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionOwnersRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetEthCollectionOwners(GetEthCollectionOwnersRequest getEthCollectionOwnersRequest = default(GetEthCollectionOwnersRequest), int operationIndex = 0);

        /// <summary>
        /// Wallet Owners by Collection
        /// </summary>
        /// <remarks>
        /// Returns all wallet owners for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionOwnersRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetEthCollectionOwnersWithHttpInfo(GetEthCollectionOwnersRequest getEthCollectionOwnersRequest = default(GetEthCollectionOwnersRequest), int operationIndex = 0);
        /// <summary>
        /// Price Differentiation by Trait
        /// </summary>
        /// <remarks>
        /// Returns how trait differentiates price for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionPriceDiffRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetEthCollectionPriceDiff(GetEthCollectionPriceDiffRequest getEthCollectionPriceDiffRequest = default(GetEthCollectionPriceDiffRequest), int operationIndex = 0);

        /// <summary>
        /// Price Differentiation by Trait
        /// </summary>
        /// <remarks>
        /// Returns how trait differentiates price for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionPriceDiffRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetEthCollectionPriceDiffWithHttpInfo(GetEthCollectionPriceDiffRequest getEthCollectionPriceDiffRequest = default(GetEthCollectionPriceDiffRequest), int operationIndex = 0);
        /// <summary>
        /// Collection Sales Price Candlesticks
        /// </summary>
        /// <remarks>
        /// Returns collection sales price open, high, low, close and volume at a selected time interval
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionSalesOHLCRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetEthCollectionSalesOHLC(GetEthCollectionSalesOHLCRequest getEthCollectionSalesOHLCRequest = default(GetEthCollectionSalesOHLCRequest), int operationIndex = 0);

        /// <summary>
        /// Collection Sales Price Candlesticks
        /// </summary>
        /// <remarks>
        /// Returns collection sales price open, high, low, close and volume at a selected time interval
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionSalesOHLCRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetEthCollectionSalesOHLCWithHttpInfo(GetEthCollectionSalesOHLCRequest getEthCollectionSalesOHLCRequest = default(GetEthCollectionSalesOHLCRequest), int operationIndex = 0);
        /// <summary>
        /// Summary Statistics by Collection
        /// </summary>
        /// <remarks>
        /// Returns summary analytics for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionSummaryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetEthCollectionSummary(GetEthCollectionSummaryRequest getEthCollectionSummaryRequest = default(GetEthCollectionSummaryRequest), int operationIndex = 0);

        /// <summary>
        /// Summary Statistics by Collection
        /// </summary>
        /// <remarks>
        /// Returns summary analytics for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionSummaryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetEthCollectionSummaryWithHttpInfo(GetEthCollectionSummaryRequest getEthCollectionSummaryRequest = default(GetEthCollectionSummaryRequest), int operationIndex = 0);
        /// <summary>
        /// Transactions by Collection
        /// </summary>
        /// <remarks>
        /// Returns all transactions for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetEthCollectionTransactions(GetEthCollectionTransactionsRequest getEthCollectionTransactionsRequest = default(GetEthCollectionTransactionsRequest), int operationIndex = 0);

        /// <summary>
        /// Transactions by Collection
        /// </summary>
        /// <remarks>
        /// Returns all transactions for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetEthCollectionTransactionsWithHttpInfo(GetEthCollectionTransactionsRequest getEthCollectionTransactionsRequest = default(GetEthCollectionTransactionsRequest), int operationIndex = 0);
        /// <summary>
        /// Aggregated Collections Supported by Gallop
        /// </summary>
        /// <remarks>
        /// Returns all Gallop aggregated collections
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetEthCollections(GetEthCollectionsRequest getEthCollectionsRequest = default(GetEthCollectionsRequest), int operationIndex = 0);

        /// <summary>
        /// Aggregated Collections Supported by Gallop
        /// </summary>
        /// <remarks>
        /// Returns all Gallop aggregated collections
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetEthCollectionsWithHttpInfo(GetEthCollectionsRequest getEthCollectionsRequest = default(GetEthCollectionsRequest), int operationIndex = 0);
        /// <summary>
        /// Custom Volatility &amp; Risk Metrics by Collection
        /// </summary>
        /// <remarks>
        /// Returns summary of customizable volatility and risk metrics for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCustomCollectionRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetEthCustomCollectionRisk(GetEthCustomCollectionRiskRequest getEthCustomCollectionRiskRequest = default(GetEthCustomCollectionRiskRequest), int operationIndex = 0);

        /// <summary>
        /// Custom Volatility &amp; Risk Metrics by Collection
        /// </summary>
        /// <remarks>
        /// Returns summary of customizable volatility and risk metrics for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCustomCollectionRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetEthCustomCollectionRiskWithHttpInfo(GetEthCustomCollectionRiskRequest getEthCustomCollectionRiskRequest = default(GetEthCustomCollectionRiskRequest), int operationIndex = 0);
        /// <summary>
        /// Custom Volatility &amp; Risk Metrics by Token
        /// </summary>
        /// <remarks>
        /// Returns summary of customizable volatility and risk metrics for a given token
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCustomTokenRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetEthCustomTokenRisk(GetEthCustomTokenRiskRequest getEthCustomTokenRiskRequest = default(GetEthCustomTokenRiskRequest), int operationIndex = 0);

        /// <summary>
        /// Custom Volatility &amp; Risk Metrics by Token
        /// </summary>
        /// <remarks>
        /// Returns summary of customizable volatility and risk metrics for a given token
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCustomTokenRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetEthCustomTokenRiskWithHttpInfo(GetEthCustomTokenRiskRequest getEthCustomTokenRiskRequest = default(GetEthCustomTokenRiskRequest), int operationIndex = 0);
        /// <summary>
        /// Default Volatility &amp; Risk Metrics by Collection
        /// </summary>
        /// <remarks>
        /// Returns summary of default volatility and risk metrics for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthDefaultCollectionRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetEthDefaultCollectionRisk(GetEthDefaultCollectionRiskRequest getEthDefaultCollectionRiskRequest = default(GetEthDefaultCollectionRiskRequest), int operationIndex = 0);

        /// <summary>
        /// Default Volatility &amp; Risk Metrics by Collection
        /// </summary>
        /// <remarks>
        /// Returns summary of default volatility and risk metrics for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthDefaultCollectionRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetEthDefaultCollectionRiskWithHttpInfo(GetEthDefaultCollectionRiskRequest getEthDefaultCollectionRiskRequest = default(GetEthDefaultCollectionRiskRequest), int operationIndex = 0);
        /// <summary>
        /// Default Volatility &amp; Risk Metrics by Token
        /// </summary>
        /// <remarks>
        /// Returns summary of default volatility and risk metrics for a given token
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthDefaultTokenRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetEthDefaultTokenRisk(GetEthDefaultTokenRiskRequest getEthDefaultTokenRiskRequest = default(GetEthDefaultTokenRiskRequest), int operationIndex = 0);

        /// <summary>
        /// Default Volatility &amp; Risk Metrics by Token
        /// </summary>
        /// <remarks>
        /// Returns summary of default volatility and risk metrics for a given token
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthDefaultTokenRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetEthDefaultTokenRiskWithHttpInfo(GetEthDefaultTokenRiskRequest getEthDefaultTokenRiskRequest = default(GetEthDefaultTokenRiskRequest), int operationIndex = 0);
        /// <summary>
        /// ENS Lookup
        /// </summary>
        /// <remarks>
        /// Returns Ethereum Name Service data for a given wallet address
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthEnsLookupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetEthEnsLookup(GetEthEnsLookupRequest getEthEnsLookupRequest = default(GetEthEnsLookupRequest), int operationIndex = 0);

        /// <summary>
        /// ENS Lookup
        /// </summary>
        /// <remarks>
        /// Returns Ethereum Name Service data for a given wallet address
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthEnsLookupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetEthEnsLookupWithHttpInfo(GetEthEnsLookupRequest getEthEnsLookupRequest = default(GetEthEnsLookupRequest), int operationIndex = 0);
        /// <summary>
        /// Marketplace Activity by Collection
        /// </summary>
        /// <remarks>
        /// Returns marketplace activity for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthHistoricalEventsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetEthHistoricalEvents(GetEthHistoricalEventsRequest getEthHistoricalEventsRequest = default(GetEthHistoricalEventsRequest), int operationIndex = 0);

        /// <summary>
        /// Marketplace Activity by Collection
        /// </summary>
        /// <remarks>
        /// Returns marketplace activity for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthHistoricalEventsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetEthHistoricalEventsWithHttpInfo(GetEthHistoricalEventsRequest getEthHistoricalEventsRequest = default(GetEthHistoricalEventsRequest), int operationIndex = 0);
        /// <summary>
        /// Historical Transactions by Collection
        /// </summary>
        /// <remarks>
        /// Returns all transactions for a given collection in bulk
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthHistoricalTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetEthHistoricalTransactions(GetEthHistoricalTransactionsRequest getEthHistoricalTransactionsRequest = default(GetEthHistoricalTransactionsRequest), int operationIndex = 0);

        /// <summary>
        /// Historical Transactions by Collection
        /// </summary>
        /// <remarks>
        /// Returns all transactions for a given collection in bulk
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthHistoricalTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetEthHistoricalTransactionsWithHttpInfo(GetEthHistoricalTransactionsRequest getEthHistoricalTransactionsRequest = default(GetEthHistoricalTransactionsRequest), int operationIndex = 0);
        /// <summary>
        /// Ethereum Leaderboard by Collection
        /// </summary>
        /// <remarks>
        /// Returns top collections by volume transaction volume or sales count
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthLeaderBoardRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetEthLeaderBoard(GetEthLeaderBoardRequest getEthLeaderBoardRequest = default(GetEthLeaderBoardRequest), int operationIndex = 0);

        /// <summary>
        /// Ethereum Leaderboard by Collection
        /// </summary>
        /// <remarks>
        /// Returns top collections by volume transaction volume or sales count
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthLeaderBoardRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetEthLeaderBoardWithHttpInfo(GetEthLeaderBoardRequest getEthLeaderBoardRequest = default(GetEthLeaderBoardRequest), int operationIndex = 0);
        /// <summary>
        /// Collection Summary by Marketplace
        /// </summary>
        /// <remarks>
        /// Returns summary statistics for a collection by marketplace
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthMarketplaceDataRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetEthMarketplaceData(GetEthMarketplaceDataRequest getEthMarketplaceDataRequest = default(GetEthMarketplaceDataRequest), int operationIndex = 0);

        /// <summary>
        /// Collection Summary by Marketplace
        /// </summary>
        /// <remarks>
        /// Returns summary statistics for a collection by marketplace
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthMarketplaceDataRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetEthMarketplaceDataWithHttpInfo(GetEthMarketplaceDataRequest getEthMarketplaceDataRequest = default(GetEthMarketplaceDataRequest), int operationIndex = 0);
        /// <summary>
        /// Marketplace Floor Price by Collection
        /// </summary>
        /// <remarks>
        /// Returns current floor price for all collections by marketplace
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthMarketplaceFloorPriceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetEthMarketplaceFloorPrice(GetEthMarketplaceFloorPriceRequest getEthMarketplaceFloorPriceRequest = default(GetEthMarketplaceFloorPriceRequest), int operationIndex = 0);

        /// <summary>
        /// Marketplace Floor Price by Collection
        /// </summary>
        /// <remarks>
        /// Returns current floor price for all collections by marketplace
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthMarketplaceFloorPriceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetEthMarketplaceFloorPriceWithHttpInfo(GetEthMarketplaceFloorPriceRequest getEthMarketplaceFloorPriceRequest = default(GetEthMarketplaceFloorPriceRequest), int operationIndex = 0);
        /// <summary>
        /// Collection Listings by Trait &amp; Marketplace
        /// </summary>
        /// <remarks>
        /// Returns listing statistics for a collection by trait and marketplace
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthMarketplaceTraitDataRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetEthMarketplaceTraitData(GetEthMarketplaceTraitDataRequest getEthMarketplaceTraitDataRequest = default(GetEthMarketplaceTraitDataRequest), int operationIndex = 0);

        /// <summary>
        /// Collection Listings by Trait &amp; Marketplace
        /// </summary>
        /// <remarks>
        /// Returns listing statistics for a collection by trait and marketplace
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthMarketplaceTraitDataRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetEthMarketplaceTraitDataWithHttpInfo(GetEthMarketplaceTraitDataRequest getEthMarketplaceTraitDataRequest = default(GetEthMarketplaceTraitDataRequest), int operationIndex = 0);
        /// <summary>
        /// Token Rarity by Collection
        /// </summary>
        /// <remarks>
        /// Returns rarity by token for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthRarityRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetEthRarity(GetEthRarityRequest getEthRarityRequest = default(GetEthRarityRequest), int operationIndex = 0);

        /// <summary>
        /// Token Rarity by Collection
        /// </summary>
        /// <remarks>
        /// Returns rarity by token for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthRarityRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetEthRarityWithHttpInfo(GetEthRarityRequest getEthRarityRequest = default(GetEthRarityRequest), int operationIndex = 0);
        /// <summary>
        /// Liquidation &amp; Appraisal Estimate by Token
        /// </summary>
        /// <remarks>
        /// Get estimates of appraisal and liquidation values for a set of tokens. The app returns nowcasts by default, but if provided a &#x60;horizon&#x60; and &#x60;frequency&#x60;, it will return forcasts for &#x60;horizon&#x60; periods out at interval &#x60;frequency&#x60;. The app is does not deliver individualized financial advice, but merely provides analytical estimates of token appraisal and liquidation values
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokenAppraisalRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetEthTokenAppraisal(GetEthTokenAppraisalRequest getEthTokenAppraisalRequest = default(GetEthTokenAppraisalRequest), int operationIndex = 0);

        /// <summary>
        /// Liquidation &amp; Appraisal Estimate by Token
        /// </summary>
        /// <remarks>
        /// Get estimates of appraisal and liquidation values for a set of tokens. The app returns nowcasts by default, but if provided a &#x60;horizon&#x60; and &#x60;frequency&#x60;, it will return forcasts for &#x60;horizon&#x60; periods out at interval &#x60;frequency&#x60;. The app is does not deliver individualized financial advice, but merely provides analytical estimates of token appraisal and liquidation values
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokenAppraisalRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetEthTokenAppraisalWithHttpInfo(GetEthTokenAppraisalRequest getEthTokenAppraisalRequest = default(GetEthTokenAppraisalRequest), int operationIndex = 0);
        /// <summary>
        /// Price Forecast by Token
        /// </summary>
        /// <remarks>
        /// Returns price, return, and volatility forecast for a given token
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokenForecastsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetEthTokenForecasts(GetEthTokenForecastsRequest getEthTokenForecastsRequest = default(GetEthTokenForecastsRequest), int operationIndex = 0);

        /// <summary>
        /// Price Forecast by Token
        /// </summary>
        /// <remarks>
        /// Returns price, return, and volatility forecast for a given token
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokenForecastsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetEthTokenForecastsWithHttpInfo(GetEthTokenForecastsRequest getEthTokenForecastsRequest = default(GetEthTokenForecastsRequest), int operationIndex = 0);
        /// <summary>
        /// Summary Statistics by Token
        /// </summary>
        /// <remarks>
        /// Returns summary analytics for a given token
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokenSummaryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetEthTokenSummary(GetEthTokenSummaryRequest getEthTokenSummaryRequest = default(GetEthTokenSummaryRequest), int operationIndex = 0);

        /// <summary>
        /// Summary Statistics by Token
        /// </summary>
        /// <remarks>
        /// Returns summary analytics for a given token
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokenSummaryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetEthTokenSummaryWithHttpInfo(GetEthTokenSummaryRequest getEthTokenSummaryRequest = default(GetEthTokenSummaryRequest), int operationIndex = 0);
        /// <summary>
        /// Transactions by Token
        /// </summary>
        /// <remarks>
        /// Returns all transactions for a given token
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokenTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetEthTokenTransactions(GetEthTokenTransactionsRequest getEthTokenTransactionsRequest = default(GetEthTokenTransactionsRequest), int operationIndex = 0);

        /// <summary>
        /// Transactions by Token
        /// </summary>
        /// <remarks>
        /// Returns all transactions for a given token
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokenTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetEthTokenTransactionsWithHttpInfo(GetEthTokenTransactionsRequest getEthTokenTransactionsRequest = default(GetEthTokenTransactionsRequest), int operationIndex = 0);
        /// <summary>
        /// Tokens by Collection
        /// </summary>
        /// <remarks>
        /// Returns all tokens for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokensRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetEthTokens(GetEthTokensRequest getEthTokensRequest = default(GetEthTokensRequest), int operationIndex = 0);

        /// <summary>
        /// Tokens by Collection
        /// </summary>
        /// <remarks>
        /// Returns all tokens for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokensRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetEthTokensWithHttpInfo(GetEthTokensRequest getEthTokensRequest = default(GetEthTokensRequest), int operationIndex = 0);
        /// <summary>
        /// Wallet Activity Labels
        /// </summary>
        /// <remarks>
        /// Classifies a wallet&#39;s behaviour according to its on-chain activity
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWalletLabelsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetEthWalletLabels(GetEthWalletLabelsRequest getEthWalletLabelsRequest = default(GetEthWalletLabelsRequest), int operationIndex = 0);

        /// <summary>
        /// Wallet Activity Labels
        /// </summary>
        /// <remarks>
        /// Classifies a wallet&#39;s behaviour according to its on-chain activity
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWalletLabelsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetEthWalletLabelsWithHttpInfo(GetEthWalletLabelsRequest getEthWalletLabelsRequest = default(GetEthWalletLabelsRequest), int operationIndex = 0);
        /// <summary>
        /// Tokens Owned by Wallet
        /// </summary>
        /// <remarks>
        /// Returns all tokens owned for a given wallet
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWalletNFTsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetEthWalletNFTs(GetEthWalletNFTsRequest getEthWalletNFTsRequest = default(GetEthWalletNFTsRequest), int operationIndex = 0);

        /// <summary>
        /// Tokens Owned by Wallet
        /// </summary>
        /// <remarks>
        /// Returns all tokens owned for a given wallet
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWalletNFTsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetEthWalletNFTsWithHttpInfo(GetEthWalletNFTsRequest getEthWalletNFTsRequest = default(GetEthWalletNFTsRequest), int operationIndex = 0);
        /// <summary>
        /// Historical Token Transactions by Wallet
        /// </summary>
        /// <remarks>
        /// Returns all historical token transactions for a given wallet
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWalletTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetEthWalletTransactions(GetEthWalletTransactionsRequest getEthWalletTransactionsRequest = default(GetEthWalletTransactionsRequest), int operationIndex = 0);

        /// <summary>
        /// Historical Token Transactions by Wallet
        /// </summary>
        /// <remarks>
        /// Returns all historical token transactions for a given wallet
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWalletTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetEthWalletTransactionsWithHttpInfo(GetEthWalletTransactionsRequest getEthWalletTransactionsRequest = default(GetEthWalletTransactionsRequest), int operationIndex = 0);
        /// <summary>
        /// Value All Tokens Owned by Wallet
        /// </summary>
        /// <remarks>
        /// Returns valuation of all tokens owned for a given wallet
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPolWalletNFTsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetEthWalletValuation(GetPolWalletNFTsRequest getPolWalletNFTsRequest = default(GetPolWalletNFTsRequest), int operationIndex = 0);

        /// <summary>
        /// Value All Tokens Owned by Wallet
        /// </summary>
        /// <remarks>
        /// Returns valuation of all tokens owned for a given wallet
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPolWalletNFTsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetEthWalletValuationWithHttpInfo(GetPolWalletNFTsRequest getPolWalletNFTsRequest = default(GetPolWalletNFTsRequest), int operationIndex = 0);
        /// <summary>
        /// Wash Trades by Transaction
        /// </summary>
        /// <remarks>
        /// Returns suspected wash trades for a given transaction hash
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWashTradeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetEthWashTrade(GetEthWashTradeRequest getEthWashTradeRequest = default(GetEthWashTradeRequest), int operationIndex = 0);

        /// <summary>
        /// Wash Trades by Transaction
        /// </summary>
        /// <remarks>
        /// Returns suspected wash trades for a given transaction hash
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWashTradeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetEthWashTradeWithHttpInfo(GetEthWashTradeRequest getEthWashTradeRequest = default(GetEthWashTradeRequest), int operationIndex = 0);
        /// <summary>
        /// Wash Trades by Collection
        /// </summary>
        /// <remarks>
        /// Returns suspected wash trades by token for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWashTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetEthWashTransactions(GetEthWashTransactionsRequest getEthWashTransactionsRequest = default(GetEthWashTransactionsRequest), int operationIndex = 0);

        /// <summary>
        /// Wash Trades by Collection
        /// </summary>
        /// <remarks>
        /// Returns suspected wash trades by token for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWashTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetEthWashTransactionsWithHttpInfo(GetEthWashTransactionsRequest getEthWashTransactionsRequest = default(GetEthWashTransactionsRequest), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEthereumApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Intraday Marketplace Floor Price by Collection
        /// </summary>
        /// <remarks>
        /// Returns intraday floor price for a given collection by marketplace
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionFloorPriceOHLCRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetEthCollectionFloorPriceOHLCAsync(GetEthCollectionFloorPriceOHLCRequest getEthCollectionFloorPriceOHLCRequest = default(GetEthCollectionFloorPriceOHLCRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Intraday Marketplace Floor Price by Collection
        /// </summary>
        /// <remarks>
        /// Returns intraday floor price for a given collection by marketplace
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionFloorPriceOHLCRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEthCollectionFloorPriceOHLCWithHttpInfoAsync(GetEthCollectionFloorPriceOHLCRequest getEthCollectionFloorPriceOHLCRequest = default(GetEthCollectionFloorPriceOHLCRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Price Forecast by Collection
        /// </summary>
        /// <remarks>
        /// Returns price, return, and volatility forecast for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionForecastsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetEthCollectionForecastsAsync(GetEthCollectionForecastsRequest getEthCollectionForecastsRequest = default(GetEthCollectionForecastsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Price Forecast by Collection
        /// </summary>
        /// <remarks>
        /// Returns price, return, and volatility forecast for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionForecastsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEthCollectionForecastsWithHttpInfoAsync(GetEthCollectionForecastsRequest getEthCollectionForecastsRequest = default(GetEthCollectionForecastsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Collection Floor Price and Listings Candlesticks
        /// </summary>
        /// <remarks>
        /// Returns historical floor price or more extensive open / high / floor / close candlesticks for collection listings at marketplaces at a selected time interval, as well as the number of active listings, the number of unique owners and the average age of open listings
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionListingsOHLCRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetEthCollectionListingsOHLCAsync(GetEthCollectionListingsOHLCRequest getEthCollectionListingsOHLCRequest = default(GetEthCollectionListingsOHLCRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Collection Floor Price and Listings Candlesticks
        /// </summary>
        /// <remarks>
        /// Returns historical floor price or more extensive open / high / floor / close candlesticks for collection listings at marketplaces at a selected time interval, as well as the number of active listings, the number of unique owners and the average age of open listings
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionListingsOHLCRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEthCollectionListingsOHLCWithHttpInfoAsync(GetEthCollectionListingsOHLCRequest getEthCollectionListingsOHLCRequest = default(GetEthCollectionListingsOHLCRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Wallet Owners by Collection
        /// </summary>
        /// <remarks>
        /// Returns all wallet owners for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionOwnersRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetEthCollectionOwnersAsync(GetEthCollectionOwnersRequest getEthCollectionOwnersRequest = default(GetEthCollectionOwnersRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Wallet Owners by Collection
        /// </summary>
        /// <remarks>
        /// Returns all wallet owners for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionOwnersRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEthCollectionOwnersWithHttpInfoAsync(GetEthCollectionOwnersRequest getEthCollectionOwnersRequest = default(GetEthCollectionOwnersRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Price Differentiation by Trait
        /// </summary>
        /// <remarks>
        /// Returns how trait differentiates price for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionPriceDiffRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetEthCollectionPriceDiffAsync(GetEthCollectionPriceDiffRequest getEthCollectionPriceDiffRequest = default(GetEthCollectionPriceDiffRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Price Differentiation by Trait
        /// </summary>
        /// <remarks>
        /// Returns how trait differentiates price for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionPriceDiffRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEthCollectionPriceDiffWithHttpInfoAsync(GetEthCollectionPriceDiffRequest getEthCollectionPriceDiffRequest = default(GetEthCollectionPriceDiffRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Collection Sales Price Candlesticks
        /// </summary>
        /// <remarks>
        /// Returns collection sales price open, high, low, close and volume at a selected time interval
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionSalesOHLCRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetEthCollectionSalesOHLCAsync(GetEthCollectionSalesOHLCRequest getEthCollectionSalesOHLCRequest = default(GetEthCollectionSalesOHLCRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Collection Sales Price Candlesticks
        /// </summary>
        /// <remarks>
        /// Returns collection sales price open, high, low, close and volume at a selected time interval
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionSalesOHLCRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEthCollectionSalesOHLCWithHttpInfoAsync(GetEthCollectionSalesOHLCRequest getEthCollectionSalesOHLCRequest = default(GetEthCollectionSalesOHLCRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Summary Statistics by Collection
        /// </summary>
        /// <remarks>
        /// Returns summary analytics for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionSummaryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetEthCollectionSummaryAsync(GetEthCollectionSummaryRequest getEthCollectionSummaryRequest = default(GetEthCollectionSummaryRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Summary Statistics by Collection
        /// </summary>
        /// <remarks>
        /// Returns summary analytics for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionSummaryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEthCollectionSummaryWithHttpInfoAsync(GetEthCollectionSummaryRequest getEthCollectionSummaryRequest = default(GetEthCollectionSummaryRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Transactions by Collection
        /// </summary>
        /// <remarks>
        /// Returns all transactions for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetEthCollectionTransactionsAsync(GetEthCollectionTransactionsRequest getEthCollectionTransactionsRequest = default(GetEthCollectionTransactionsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Transactions by Collection
        /// </summary>
        /// <remarks>
        /// Returns all transactions for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEthCollectionTransactionsWithHttpInfoAsync(GetEthCollectionTransactionsRequest getEthCollectionTransactionsRequest = default(GetEthCollectionTransactionsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Aggregated Collections Supported by Gallop
        /// </summary>
        /// <remarks>
        /// Returns all Gallop aggregated collections
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetEthCollectionsAsync(GetEthCollectionsRequest getEthCollectionsRequest = default(GetEthCollectionsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Aggregated Collections Supported by Gallop
        /// </summary>
        /// <remarks>
        /// Returns all Gallop aggregated collections
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEthCollectionsWithHttpInfoAsync(GetEthCollectionsRequest getEthCollectionsRequest = default(GetEthCollectionsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Custom Volatility &amp; Risk Metrics by Collection
        /// </summary>
        /// <remarks>
        /// Returns summary of customizable volatility and risk metrics for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCustomCollectionRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetEthCustomCollectionRiskAsync(GetEthCustomCollectionRiskRequest getEthCustomCollectionRiskRequest = default(GetEthCustomCollectionRiskRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Custom Volatility &amp; Risk Metrics by Collection
        /// </summary>
        /// <remarks>
        /// Returns summary of customizable volatility and risk metrics for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCustomCollectionRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEthCustomCollectionRiskWithHttpInfoAsync(GetEthCustomCollectionRiskRequest getEthCustomCollectionRiskRequest = default(GetEthCustomCollectionRiskRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Custom Volatility &amp; Risk Metrics by Token
        /// </summary>
        /// <remarks>
        /// Returns summary of customizable volatility and risk metrics for a given token
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCustomTokenRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetEthCustomTokenRiskAsync(GetEthCustomTokenRiskRequest getEthCustomTokenRiskRequest = default(GetEthCustomTokenRiskRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Custom Volatility &amp; Risk Metrics by Token
        /// </summary>
        /// <remarks>
        /// Returns summary of customizable volatility and risk metrics for a given token
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCustomTokenRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEthCustomTokenRiskWithHttpInfoAsync(GetEthCustomTokenRiskRequest getEthCustomTokenRiskRequest = default(GetEthCustomTokenRiskRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Default Volatility &amp; Risk Metrics by Collection
        /// </summary>
        /// <remarks>
        /// Returns summary of default volatility and risk metrics for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthDefaultCollectionRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetEthDefaultCollectionRiskAsync(GetEthDefaultCollectionRiskRequest getEthDefaultCollectionRiskRequest = default(GetEthDefaultCollectionRiskRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Default Volatility &amp; Risk Metrics by Collection
        /// </summary>
        /// <remarks>
        /// Returns summary of default volatility and risk metrics for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthDefaultCollectionRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEthDefaultCollectionRiskWithHttpInfoAsync(GetEthDefaultCollectionRiskRequest getEthDefaultCollectionRiskRequest = default(GetEthDefaultCollectionRiskRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Default Volatility &amp; Risk Metrics by Token
        /// </summary>
        /// <remarks>
        /// Returns summary of default volatility and risk metrics for a given token
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthDefaultTokenRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetEthDefaultTokenRiskAsync(GetEthDefaultTokenRiskRequest getEthDefaultTokenRiskRequest = default(GetEthDefaultTokenRiskRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Default Volatility &amp; Risk Metrics by Token
        /// </summary>
        /// <remarks>
        /// Returns summary of default volatility and risk metrics for a given token
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthDefaultTokenRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEthDefaultTokenRiskWithHttpInfoAsync(GetEthDefaultTokenRiskRequest getEthDefaultTokenRiskRequest = default(GetEthDefaultTokenRiskRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// ENS Lookup
        /// </summary>
        /// <remarks>
        /// Returns Ethereum Name Service data for a given wallet address
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthEnsLookupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetEthEnsLookupAsync(GetEthEnsLookupRequest getEthEnsLookupRequest = default(GetEthEnsLookupRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// ENS Lookup
        /// </summary>
        /// <remarks>
        /// Returns Ethereum Name Service data for a given wallet address
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthEnsLookupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEthEnsLookupWithHttpInfoAsync(GetEthEnsLookupRequest getEthEnsLookupRequest = default(GetEthEnsLookupRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Marketplace Activity by Collection
        /// </summary>
        /// <remarks>
        /// Returns marketplace activity for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthHistoricalEventsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetEthHistoricalEventsAsync(GetEthHistoricalEventsRequest getEthHistoricalEventsRequest = default(GetEthHistoricalEventsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Marketplace Activity by Collection
        /// </summary>
        /// <remarks>
        /// Returns marketplace activity for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthHistoricalEventsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEthHistoricalEventsWithHttpInfoAsync(GetEthHistoricalEventsRequest getEthHistoricalEventsRequest = default(GetEthHistoricalEventsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Historical Transactions by Collection
        /// </summary>
        /// <remarks>
        /// Returns all transactions for a given collection in bulk
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthHistoricalTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetEthHistoricalTransactionsAsync(GetEthHistoricalTransactionsRequest getEthHistoricalTransactionsRequest = default(GetEthHistoricalTransactionsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Historical Transactions by Collection
        /// </summary>
        /// <remarks>
        /// Returns all transactions for a given collection in bulk
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthHistoricalTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEthHistoricalTransactionsWithHttpInfoAsync(GetEthHistoricalTransactionsRequest getEthHistoricalTransactionsRequest = default(GetEthHistoricalTransactionsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Ethereum Leaderboard by Collection
        /// </summary>
        /// <remarks>
        /// Returns top collections by volume transaction volume or sales count
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthLeaderBoardRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetEthLeaderBoardAsync(GetEthLeaderBoardRequest getEthLeaderBoardRequest = default(GetEthLeaderBoardRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Ethereum Leaderboard by Collection
        /// </summary>
        /// <remarks>
        /// Returns top collections by volume transaction volume or sales count
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthLeaderBoardRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEthLeaderBoardWithHttpInfoAsync(GetEthLeaderBoardRequest getEthLeaderBoardRequest = default(GetEthLeaderBoardRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Collection Summary by Marketplace
        /// </summary>
        /// <remarks>
        /// Returns summary statistics for a collection by marketplace
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthMarketplaceDataRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetEthMarketplaceDataAsync(GetEthMarketplaceDataRequest getEthMarketplaceDataRequest = default(GetEthMarketplaceDataRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Collection Summary by Marketplace
        /// </summary>
        /// <remarks>
        /// Returns summary statistics for a collection by marketplace
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthMarketplaceDataRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEthMarketplaceDataWithHttpInfoAsync(GetEthMarketplaceDataRequest getEthMarketplaceDataRequest = default(GetEthMarketplaceDataRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Marketplace Floor Price by Collection
        /// </summary>
        /// <remarks>
        /// Returns current floor price for all collections by marketplace
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthMarketplaceFloorPriceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetEthMarketplaceFloorPriceAsync(GetEthMarketplaceFloorPriceRequest getEthMarketplaceFloorPriceRequest = default(GetEthMarketplaceFloorPriceRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Marketplace Floor Price by Collection
        /// </summary>
        /// <remarks>
        /// Returns current floor price for all collections by marketplace
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthMarketplaceFloorPriceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEthMarketplaceFloorPriceWithHttpInfoAsync(GetEthMarketplaceFloorPriceRequest getEthMarketplaceFloorPriceRequest = default(GetEthMarketplaceFloorPriceRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Collection Listings by Trait &amp; Marketplace
        /// </summary>
        /// <remarks>
        /// Returns listing statistics for a collection by trait and marketplace
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthMarketplaceTraitDataRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetEthMarketplaceTraitDataAsync(GetEthMarketplaceTraitDataRequest getEthMarketplaceTraitDataRequest = default(GetEthMarketplaceTraitDataRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Collection Listings by Trait &amp; Marketplace
        /// </summary>
        /// <remarks>
        /// Returns listing statistics for a collection by trait and marketplace
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthMarketplaceTraitDataRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEthMarketplaceTraitDataWithHttpInfoAsync(GetEthMarketplaceTraitDataRequest getEthMarketplaceTraitDataRequest = default(GetEthMarketplaceTraitDataRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Token Rarity by Collection
        /// </summary>
        /// <remarks>
        /// Returns rarity by token for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthRarityRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetEthRarityAsync(GetEthRarityRequest getEthRarityRequest = default(GetEthRarityRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Token Rarity by Collection
        /// </summary>
        /// <remarks>
        /// Returns rarity by token for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthRarityRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEthRarityWithHttpInfoAsync(GetEthRarityRequest getEthRarityRequest = default(GetEthRarityRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Liquidation &amp; Appraisal Estimate by Token
        /// </summary>
        /// <remarks>
        /// Get estimates of appraisal and liquidation values for a set of tokens. The app returns nowcasts by default, but if provided a &#x60;horizon&#x60; and &#x60;frequency&#x60;, it will return forcasts for &#x60;horizon&#x60; periods out at interval &#x60;frequency&#x60;. The app is does not deliver individualized financial advice, but merely provides analytical estimates of token appraisal and liquidation values
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokenAppraisalRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetEthTokenAppraisalAsync(GetEthTokenAppraisalRequest getEthTokenAppraisalRequest = default(GetEthTokenAppraisalRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Liquidation &amp; Appraisal Estimate by Token
        /// </summary>
        /// <remarks>
        /// Get estimates of appraisal and liquidation values for a set of tokens. The app returns nowcasts by default, but if provided a &#x60;horizon&#x60; and &#x60;frequency&#x60;, it will return forcasts for &#x60;horizon&#x60; periods out at interval &#x60;frequency&#x60;. The app is does not deliver individualized financial advice, but merely provides analytical estimates of token appraisal and liquidation values
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokenAppraisalRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEthTokenAppraisalWithHttpInfoAsync(GetEthTokenAppraisalRequest getEthTokenAppraisalRequest = default(GetEthTokenAppraisalRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Price Forecast by Token
        /// </summary>
        /// <remarks>
        /// Returns price, return, and volatility forecast for a given token
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokenForecastsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetEthTokenForecastsAsync(GetEthTokenForecastsRequest getEthTokenForecastsRequest = default(GetEthTokenForecastsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Price Forecast by Token
        /// </summary>
        /// <remarks>
        /// Returns price, return, and volatility forecast for a given token
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokenForecastsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEthTokenForecastsWithHttpInfoAsync(GetEthTokenForecastsRequest getEthTokenForecastsRequest = default(GetEthTokenForecastsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Summary Statistics by Token
        /// </summary>
        /// <remarks>
        /// Returns summary analytics for a given token
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokenSummaryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetEthTokenSummaryAsync(GetEthTokenSummaryRequest getEthTokenSummaryRequest = default(GetEthTokenSummaryRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Summary Statistics by Token
        /// </summary>
        /// <remarks>
        /// Returns summary analytics for a given token
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokenSummaryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEthTokenSummaryWithHttpInfoAsync(GetEthTokenSummaryRequest getEthTokenSummaryRequest = default(GetEthTokenSummaryRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Transactions by Token
        /// </summary>
        /// <remarks>
        /// Returns all transactions for a given token
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokenTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetEthTokenTransactionsAsync(GetEthTokenTransactionsRequest getEthTokenTransactionsRequest = default(GetEthTokenTransactionsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Transactions by Token
        /// </summary>
        /// <remarks>
        /// Returns all transactions for a given token
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokenTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEthTokenTransactionsWithHttpInfoAsync(GetEthTokenTransactionsRequest getEthTokenTransactionsRequest = default(GetEthTokenTransactionsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Tokens by Collection
        /// </summary>
        /// <remarks>
        /// Returns all tokens for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokensRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetEthTokensAsync(GetEthTokensRequest getEthTokensRequest = default(GetEthTokensRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Tokens by Collection
        /// </summary>
        /// <remarks>
        /// Returns all tokens for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokensRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEthTokensWithHttpInfoAsync(GetEthTokensRequest getEthTokensRequest = default(GetEthTokensRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Wallet Activity Labels
        /// </summary>
        /// <remarks>
        /// Classifies a wallet&#39;s behaviour according to its on-chain activity
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWalletLabelsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetEthWalletLabelsAsync(GetEthWalletLabelsRequest getEthWalletLabelsRequest = default(GetEthWalletLabelsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Wallet Activity Labels
        /// </summary>
        /// <remarks>
        /// Classifies a wallet&#39;s behaviour according to its on-chain activity
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWalletLabelsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEthWalletLabelsWithHttpInfoAsync(GetEthWalletLabelsRequest getEthWalletLabelsRequest = default(GetEthWalletLabelsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Tokens Owned by Wallet
        /// </summary>
        /// <remarks>
        /// Returns all tokens owned for a given wallet
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWalletNFTsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetEthWalletNFTsAsync(GetEthWalletNFTsRequest getEthWalletNFTsRequest = default(GetEthWalletNFTsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Tokens Owned by Wallet
        /// </summary>
        /// <remarks>
        /// Returns all tokens owned for a given wallet
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWalletNFTsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEthWalletNFTsWithHttpInfoAsync(GetEthWalletNFTsRequest getEthWalletNFTsRequest = default(GetEthWalletNFTsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Historical Token Transactions by Wallet
        /// </summary>
        /// <remarks>
        /// Returns all historical token transactions for a given wallet
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWalletTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetEthWalletTransactionsAsync(GetEthWalletTransactionsRequest getEthWalletTransactionsRequest = default(GetEthWalletTransactionsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Historical Token Transactions by Wallet
        /// </summary>
        /// <remarks>
        /// Returns all historical token transactions for a given wallet
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWalletTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEthWalletTransactionsWithHttpInfoAsync(GetEthWalletTransactionsRequest getEthWalletTransactionsRequest = default(GetEthWalletTransactionsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Value All Tokens Owned by Wallet
        /// </summary>
        /// <remarks>
        /// Returns valuation of all tokens owned for a given wallet
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPolWalletNFTsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetEthWalletValuationAsync(GetPolWalletNFTsRequest getPolWalletNFTsRequest = default(GetPolWalletNFTsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Value All Tokens Owned by Wallet
        /// </summary>
        /// <remarks>
        /// Returns valuation of all tokens owned for a given wallet
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPolWalletNFTsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEthWalletValuationWithHttpInfoAsync(GetPolWalletNFTsRequest getPolWalletNFTsRequest = default(GetPolWalletNFTsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Wash Trades by Transaction
        /// </summary>
        /// <remarks>
        /// Returns suspected wash trades for a given transaction hash
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWashTradeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetEthWashTradeAsync(GetEthWashTradeRequest getEthWashTradeRequest = default(GetEthWashTradeRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Wash Trades by Transaction
        /// </summary>
        /// <remarks>
        /// Returns suspected wash trades for a given transaction hash
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWashTradeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEthWashTradeWithHttpInfoAsync(GetEthWashTradeRequest getEthWashTradeRequest = default(GetEthWashTradeRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Wash Trades by Collection
        /// </summary>
        /// <remarks>
        /// Returns suspected wash trades by token for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWashTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetEthWashTransactionsAsync(GetEthWashTransactionsRequest getEthWashTransactionsRequest = default(GetEthWashTransactionsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Wash Trades by Collection
        /// </summary>
        /// <remarks>
        /// Returns suspected wash trades by token for a given collection
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWashTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetEthWashTransactionsWithHttpInfoAsync(GetEthWashTransactionsRequest getEthWashTransactionsRequest = default(GetEthWashTransactionsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEthereumApi : IEthereumApiSync, IEthereumApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EthereumApi : IEthereumApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EthereumApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EthereumApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EthereumApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EthereumApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EthereumApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EthereumApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EthereumApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EthereumApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Intraday Marketplace Floor Price by Collection Returns intraday floor price for a given collection by marketplace
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionFloorPriceOHLCRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetEthCollectionFloorPriceOHLC(GetEthCollectionFloorPriceOHLCRequest getEthCollectionFloorPriceOHLCRequest = default(GetEthCollectionFloorPriceOHLCRequest), int operationIndex = 0)
        {
            GetEthCollectionFloorPriceOHLCWithHttpInfo(getEthCollectionFloorPriceOHLCRequest);
        }

        /// <summary>
        /// Intraday Marketplace Floor Price by Collection Returns intraday floor price for a given collection by marketplace
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionFloorPriceOHLCRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> GetEthCollectionFloorPriceOHLCWithHttpInfo(GetEthCollectionFloorPriceOHLCRequest getEthCollectionFloorPriceOHLCRequest = default(GetEthCollectionFloorPriceOHLCRequest), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthCollectionFloorPriceOHLCRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthCollectionFloorPriceOHLC";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/analytics/eth/getCollectionFloorPriceOHLC", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthCollectionFloorPriceOHLC", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Intraday Marketplace Floor Price by Collection Returns intraday floor price for a given collection by marketplace
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionFloorPriceOHLCRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetEthCollectionFloorPriceOHLCAsync(GetEthCollectionFloorPriceOHLCRequest getEthCollectionFloorPriceOHLCRequest = default(GetEthCollectionFloorPriceOHLCRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetEthCollectionFloorPriceOHLCWithHttpInfoAsync(getEthCollectionFloorPriceOHLCRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Intraday Marketplace Floor Price by Collection Returns intraday floor price for a given collection by marketplace
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionFloorPriceOHLCRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> GetEthCollectionFloorPriceOHLCWithHttpInfoAsync(GetEthCollectionFloorPriceOHLCRequest getEthCollectionFloorPriceOHLCRequest = default(GetEthCollectionFloorPriceOHLCRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthCollectionFloorPriceOHLCRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthCollectionFloorPriceOHLC";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/analytics/eth/getCollectionFloorPriceOHLC", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthCollectionFloorPriceOHLC", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Price Forecast by Collection Returns price, return, and volatility forecast for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionForecastsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetEthCollectionForecasts(GetEthCollectionForecastsRequest getEthCollectionForecastsRequest = default(GetEthCollectionForecastsRequest), int operationIndex = 0)
        {
            GetEthCollectionForecastsWithHttpInfo(getEthCollectionForecastsRequest);
        }

        /// <summary>
        /// Price Forecast by Collection Returns price, return, and volatility forecast for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionForecastsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> GetEthCollectionForecastsWithHttpInfo(GetEthCollectionForecastsRequest getEthCollectionForecastsRequest = default(GetEthCollectionForecastsRequest), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthCollectionForecastsRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthCollectionForecasts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/insights/eth/getCollectionForecasts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthCollectionForecasts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Price Forecast by Collection Returns price, return, and volatility forecast for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionForecastsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetEthCollectionForecastsAsync(GetEthCollectionForecastsRequest getEthCollectionForecastsRequest = default(GetEthCollectionForecastsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetEthCollectionForecastsWithHttpInfoAsync(getEthCollectionForecastsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Price Forecast by Collection Returns price, return, and volatility forecast for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionForecastsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> GetEthCollectionForecastsWithHttpInfoAsync(GetEthCollectionForecastsRequest getEthCollectionForecastsRequest = default(GetEthCollectionForecastsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthCollectionForecastsRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthCollectionForecasts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/insights/eth/getCollectionForecasts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthCollectionForecasts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Collection Floor Price and Listings Candlesticks Returns historical floor price or more extensive open / high / floor / close candlesticks for collection listings at marketplaces at a selected time interval, as well as the number of active listings, the number of unique owners and the average age of open listings
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionListingsOHLCRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetEthCollectionListingsOHLC(GetEthCollectionListingsOHLCRequest getEthCollectionListingsOHLCRequest = default(GetEthCollectionListingsOHLCRequest), int operationIndex = 0)
        {
            GetEthCollectionListingsOHLCWithHttpInfo(getEthCollectionListingsOHLCRequest);
        }

        /// <summary>
        /// Collection Floor Price and Listings Candlesticks Returns historical floor price or more extensive open / high / floor / close candlesticks for collection listings at marketplaces at a selected time interval, as well as the number of active listings, the number of unique owners and the average age of open listings
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionListingsOHLCRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> GetEthCollectionListingsOHLCWithHttpInfo(GetEthCollectionListingsOHLCRequest getEthCollectionListingsOHLCRequest = default(GetEthCollectionListingsOHLCRequest), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthCollectionListingsOHLCRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthCollectionListingsOHLC";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/analytics/eth/getCollectionListingsOHLC", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthCollectionListingsOHLC", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Collection Floor Price and Listings Candlesticks Returns historical floor price or more extensive open / high / floor / close candlesticks for collection listings at marketplaces at a selected time interval, as well as the number of active listings, the number of unique owners and the average age of open listings
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionListingsOHLCRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetEthCollectionListingsOHLCAsync(GetEthCollectionListingsOHLCRequest getEthCollectionListingsOHLCRequest = default(GetEthCollectionListingsOHLCRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetEthCollectionListingsOHLCWithHttpInfoAsync(getEthCollectionListingsOHLCRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Collection Floor Price and Listings Candlesticks Returns historical floor price or more extensive open / high / floor / close candlesticks for collection listings at marketplaces at a selected time interval, as well as the number of active listings, the number of unique owners and the average age of open listings
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionListingsOHLCRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> GetEthCollectionListingsOHLCWithHttpInfoAsync(GetEthCollectionListingsOHLCRequest getEthCollectionListingsOHLCRequest = default(GetEthCollectionListingsOHLCRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthCollectionListingsOHLCRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthCollectionListingsOHLC";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/analytics/eth/getCollectionListingsOHLC", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthCollectionListingsOHLC", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Wallet Owners by Collection Returns all wallet owners for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionOwnersRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetEthCollectionOwners(GetEthCollectionOwnersRequest getEthCollectionOwnersRequest = default(GetEthCollectionOwnersRequest), int operationIndex = 0)
        {
            GetEthCollectionOwnersWithHttpInfo(getEthCollectionOwnersRequest);
        }

        /// <summary>
        /// Wallet Owners by Collection Returns all wallet owners for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionOwnersRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> GetEthCollectionOwnersWithHttpInfo(GetEthCollectionOwnersRequest getEthCollectionOwnersRequest = default(GetEthCollectionOwnersRequest), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthCollectionOwnersRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthCollectionOwners";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/data/eth/getCollectionOwners", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthCollectionOwners", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Wallet Owners by Collection Returns all wallet owners for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionOwnersRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetEthCollectionOwnersAsync(GetEthCollectionOwnersRequest getEthCollectionOwnersRequest = default(GetEthCollectionOwnersRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetEthCollectionOwnersWithHttpInfoAsync(getEthCollectionOwnersRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Wallet Owners by Collection Returns all wallet owners for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionOwnersRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> GetEthCollectionOwnersWithHttpInfoAsync(GetEthCollectionOwnersRequest getEthCollectionOwnersRequest = default(GetEthCollectionOwnersRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthCollectionOwnersRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthCollectionOwners";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/data/eth/getCollectionOwners", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthCollectionOwners", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Price Differentiation by Trait Returns how trait differentiates price for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionPriceDiffRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetEthCollectionPriceDiff(GetEthCollectionPriceDiffRequest getEthCollectionPriceDiffRequest = default(GetEthCollectionPriceDiffRequest), int operationIndex = 0)
        {
            GetEthCollectionPriceDiffWithHttpInfo(getEthCollectionPriceDiffRequest);
        }

        /// <summary>
        /// Price Differentiation by Trait Returns how trait differentiates price for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionPriceDiffRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> GetEthCollectionPriceDiffWithHttpInfo(GetEthCollectionPriceDiffRequest getEthCollectionPriceDiffRequest = default(GetEthCollectionPriceDiffRequest), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthCollectionPriceDiffRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthCollectionPriceDiff";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/analytics/eth/getCollectionPriceDiff", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthCollectionPriceDiff", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Price Differentiation by Trait Returns how trait differentiates price for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionPriceDiffRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetEthCollectionPriceDiffAsync(GetEthCollectionPriceDiffRequest getEthCollectionPriceDiffRequest = default(GetEthCollectionPriceDiffRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetEthCollectionPriceDiffWithHttpInfoAsync(getEthCollectionPriceDiffRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Price Differentiation by Trait Returns how trait differentiates price for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionPriceDiffRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> GetEthCollectionPriceDiffWithHttpInfoAsync(GetEthCollectionPriceDiffRequest getEthCollectionPriceDiffRequest = default(GetEthCollectionPriceDiffRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthCollectionPriceDiffRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthCollectionPriceDiff";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/analytics/eth/getCollectionPriceDiff", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthCollectionPriceDiff", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Collection Sales Price Candlesticks Returns collection sales price open, high, low, close and volume at a selected time interval
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionSalesOHLCRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetEthCollectionSalesOHLC(GetEthCollectionSalesOHLCRequest getEthCollectionSalesOHLCRequest = default(GetEthCollectionSalesOHLCRequest), int operationIndex = 0)
        {
            GetEthCollectionSalesOHLCWithHttpInfo(getEthCollectionSalesOHLCRequest);
        }

        /// <summary>
        /// Collection Sales Price Candlesticks Returns collection sales price open, high, low, close and volume at a selected time interval
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionSalesOHLCRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> GetEthCollectionSalesOHLCWithHttpInfo(GetEthCollectionSalesOHLCRequest getEthCollectionSalesOHLCRequest = default(GetEthCollectionSalesOHLCRequest), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthCollectionSalesOHLCRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthCollectionSalesOHLC";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/analytics/eth/getCollectionSalesOHLC", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthCollectionSalesOHLC", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Collection Sales Price Candlesticks Returns collection sales price open, high, low, close and volume at a selected time interval
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionSalesOHLCRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetEthCollectionSalesOHLCAsync(GetEthCollectionSalesOHLCRequest getEthCollectionSalesOHLCRequest = default(GetEthCollectionSalesOHLCRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetEthCollectionSalesOHLCWithHttpInfoAsync(getEthCollectionSalesOHLCRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Collection Sales Price Candlesticks Returns collection sales price open, high, low, close and volume at a selected time interval
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionSalesOHLCRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> GetEthCollectionSalesOHLCWithHttpInfoAsync(GetEthCollectionSalesOHLCRequest getEthCollectionSalesOHLCRequest = default(GetEthCollectionSalesOHLCRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthCollectionSalesOHLCRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthCollectionSalesOHLC";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/analytics/eth/getCollectionSalesOHLC", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthCollectionSalesOHLC", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Summary Statistics by Collection Returns summary analytics for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionSummaryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetEthCollectionSummary(GetEthCollectionSummaryRequest getEthCollectionSummaryRequest = default(GetEthCollectionSummaryRequest), int operationIndex = 0)
        {
            GetEthCollectionSummaryWithHttpInfo(getEthCollectionSummaryRequest);
        }

        /// <summary>
        /// Summary Statistics by Collection Returns summary analytics for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionSummaryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> GetEthCollectionSummaryWithHttpInfo(GetEthCollectionSummaryRequest getEthCollectionSummaryRequest = default(GetEthCollectionSummaryRequest), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthCollectionSummaryRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthCollectionSummary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/analytics/eth/getCollectionSummary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthCollectionSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Summary Statistics by Collection Returns summary analytics for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionSummaryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetEthCollectionSummaryAsync(GetEthCollectionSummaryRequest getEthCollectionSummaryRequest = default(GetEthCollectionSummaryRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetEthCollectionSummaryWithHttpInfoAsync(getEthCollectionSummaryRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Summary Statistics by Collection Returns summary analytics for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionSummaryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> GetEthCollectionSummaryWithHttpInfoAsync(GetEthCollectionSummaryRequest getEthCollectionSummaryRequest = default(GetEthCollectionSummaryRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthCollectionSummaryRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthCollectionSummary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/analytics/eth/getCollectionSummary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthCollectionSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transactions by Collection Returns all transactions for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetEthCollectionTransactions(GetEthCollectionTransactionsRequest getEthCollectionTransactionsRequest = default(GetEthCollectionTransactionsRequest), int operationIndex = 0)
        {
            GetEthCollectionTransactionsWithHttpInfo(getEthCollectionTransactionsRequest);
        }

        /// <summary>
        /// Transactions by Collection Returns all transactions for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> GetEthCollectionTransactionsWithHttpInfo(GetEthCollectionTransactionsRequest getEthCollectionTransactionsRequest = default(GetEthCollectionTransactionsRequest), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthCollectionTransactionsRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthCollectionTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/data/eth/getCollectionTransactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthCollectionTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transactions by Collection Returns all transactions for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetEthCollectionTransactionsAsync(GetEthCollectionTransactionsRequest getEthCollectionTransactionsRequest = default(GetEthCollectionTransactionsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetEthCollectionTransactionsWithHttpInfoAsync(getEthCollectionTransactionsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Transactions by Collection Returns all transactions for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> GetEthCollectionTransactionsWithHttpInfoAsync(GetEthCollectionTransactionsRequest getEthCollectionTransactionsRequest = default(GetEthCollectionTransactionsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthCollectionTransactionsRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthCollectionTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/data/eth/getCollectionTransactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthCollectionTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Aggregated Collections Supported by Gallop Returns all Gallop aggregated collections
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetEthCollections(GetEthCollectionsRequest getEthCollectionsRequest = default(GetEthCollectionsRequest), int operationIndex = 0)
        {
            GetEthCollectionsWithHttpInfo(getEthCollectionsRequest);
        }

        /// <summary>
        /// Aggregated Collections Supported by Gallop Returns all Gallop aggregated collections
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> GetEthCollectionsWithHttpInfo(GetEthCollectionsRequest getEthCollectionsRequest = default(GetEthCollectionsRequest), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthCollectionsRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthCollections";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/data/eth/getCollections", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthCollections", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Aggregated Collections Supported by Gallop Returns all Gallop aggregated collections
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetEthCollectionsAsync(GetEthCollectionsRequest getEthCollectionsRequest = default(GetEthCollectionsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetEthCollectionsWithHttpInfoAsync(getEthCollectionsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Aggregated Collections Supported by Gallop Returns all Gallop aggregated collections
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCollectionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> GetEthCollectionsWithHttpInfoAsync(GetEthCollectionsRequest getEthCollectionsRequest = default(GetEthCollectionsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthCollectionsRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthCollections";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/data/eth/getCollections", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthCollections", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Custom Volatility &amp; Risk Metrics by Collection Returns summary of customizable volatility and risk metrics for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCustomCollectionRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetEthCustomCollectionRisk(GetEthCustomCollectionRiskRequest getEthCustomCollectionRiskRequest = default(GetEthCustomCollectionRiskRequest), int operationIndex = 0)
        {
            GetEthCustomCollectionRiskWithHttpInfo(getEthCustomCollectionRiskRequest);
        }

        /// <summary>
        /// Custom Volatility &amp; Risk Metrics by Collection Returns summary of customizable volatility and risk metrics for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCustomCollectionRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> GetEthCustomCollectionRiskWithHttpInfo(GetEthCustomCollectionRiskRequest getEthCustomCollectionRiskRequest = default(GetEthCustomCollectionRiskRequest), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthCustomCollectionRiskRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthCustomCollectionRisk";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/insights/eth/getCustomCollectionRisk", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthCustomCollectionRisk", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Custom Volatility &amp; Risk Metrics by Collection Returns summary of customizable volatility and risk metrics for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCustomCollectionRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetEthCustomCollectionRiskAsync(GetEthCustomCollectionRiskRequest getEthCustomCollectionRiskRequest = default(GetEthCustomCollectionRiskRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetEthCustomCollectionRiskWithHttpInfoAsync(getEthCustomCollectionRiskRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Custom Volatility &amp; Risk Metrics by Collection Returns summary of customizable volatility and risk metrics for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCustomCollectionRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> GetEthCustomCollectionRiskWithHttpInfoAsync(GetEthCustomCollectionRiskRequest getEthCustomCollectionRiskRequest = default(GetEthCustomCollectionRiskRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthCustomCollectionRiskRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthCustomCollectionRisk";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/insights/eth/getCustomCollectionRisk", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthCustomCollectionRisk", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Custom Volatility &amp; Risk Metrics by Token Returns summary of customizable volatility and risk metrics for a given token
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCustomTokenRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetEthCustomTokenRisk(GetEthCustomTokenRiskRequest getEthCustomTokenRiskRequest = default(GetEthCustomTokenRiskRequest), int operationIndex = 0)
        {
            GetEthCustomTokenRiskWithHttpInfo(getEthCustomTokenRiskRequest);
        }

        /// <summary>
        /// Custom Volatility &amp; Risk Metrics by Token Returns summary of customizable volatility and risk metrics for a given token
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCustomTokenRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> GetEthCustomTokenRiskWithHttpInfo(GetEthCustomTokenRiskRequest getEthCustomTokenRiskRequest = default(GetEthCustomTokenRiskRequest), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthCustomTokenRiskRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthCustomTokenRisk";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/insights/eth/getCustomTokenRisk", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthCustomTokenRisk", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Custom Volatility &amp; Risk Metrics by Token Returns summary of customizable volatility and risk metrics for a given token
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCustomTokenRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetEthCustomTokenRiskAsync(GetEthCustomTokenRiskRequest getEthCustomTokenRiskRequest = default(GetEthCustomTokenRiskRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetEthCustomTokenRiskWithHttpInfoAsync(getEthCustomTokenRiskRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Custom Volatility &amp; Risk Metrics by Token Returns summary of customizable volatility and risk metrics for a given token
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthCustomTokenRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> GetEthCustomTokenRiskWithHttpInfoAsync(GetEthCustomTokenRiskRequest getEthCustomTokenRiskRequest = default(GetEthCustomTokenRiskRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthCustomTokenRiskRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthCustomTokenRisk";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/insights/eth/getCustomTokenRisk", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthCustomTokenRisk", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Default Volatility &amp; Risk Metrics by Collection Returns summary of default volatility and risk metrics for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthDefaultCollectionRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetEthDefaultCollectionRisk(GetEthDefaultCollectionRiskRequest getEthDefaultCollectionRiskRequest = default(GetEthDefaultCollectionRiskRequest), int operationIndex = 0)
        {
            GetEthDefaultCollectionRiskWithHttpInfo(getEthDefaultCollectionRiskRequest);
        }

        /// <summary>
        /// Default Volatility &amp; Risk Metrics by Collection Returns summary of default volatility and risk metrics for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthDefaultCollectionRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> GetEthDefaultCollectionRiskWithHttpInfo(GetEthDefaultCollectionRiskRequest getEthDefaultCollectionRiskRequest = default(GetEthDefaultCollectionRiskRequest), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthDefaultCollectionRiskRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthDefaultCollectionRisk";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/insights/eth/getDefaultCollectionRisk", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthDefaultCollectionRisk", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Default Volatility &amp; Risk Metrics by Collection Returns summary of default volatility and risk metrics for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthDefaultCollectionRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetEthDefaultCollectionRiskAsync(GetEthDefaultCollectionRiskRequest getEthDefaultCollectionRiskRequest = default(GetEthDefaultCollectionRiskRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetEthDefaultCollectionRiskWithHttpInfoAsync(getEthDefaultCollectionRiskRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Default Volatility &amp; Risk Metrics by Collection Returns summary of default volatility and risk metrics for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthDefaultCollectionRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> GetEthDefaultCollectionRiskWithHttpInfoAsync(GetEthDefaultCollectionRiskRequest getEthDefaultCollectionRiskRequest = default(GetEthDefaultCollectionRiskRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthDefaultCollectionRiskRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthDefaultCollectionRisk";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/insights/eth/getDefaultCollectionRisk", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthDefaultCollectionRisk", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Default Volatility &amp; Risk Metrics by Token Returns summary of default volatility and risk metrics for a given token
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthDefaultTokenRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetEthDefaultTokenRisk(GetEthDefaultTokenRiskRequest getEthDefaultTokenRiskRequest = default(GetEthDefaultTokenRiskRequest), int operationIndex = 0)
        {
            GetEthDefaultTokenRiskWithHttpInfo(getEthDefaultTokenRiskRequest);
        }

        /// <summary>
        /// Default Volatility &amp; Risk Metrics by Token Returns summary of default volatility and risk metrics for a given token
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthDefaultTokenRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> GetEthDefaultTokenRiskWithHttpInfo(GetEthDefaultTokenRiskRequest getEthDefaultTokenRiskRequest = default(GetEthDefaultTokenRiskRequest), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthDefaultTokenRiskRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthDefaultTokenRisk";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/insights/eth/getDefaultTokenRisk", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthDefaultTokenRisk", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Default Volatility &amp; Risk Metrics by Token Returns summary of default volatility and risk metrics for a given token
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthDefaultTokenRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetEthDefaultTokenRiskAsync(GetEthDefaultTokenRiskRequest getEthDefaultTokenRiskRequest = default(GetEthDefaultTokenRiskRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetEthDefaultTokenRiskWithHttpInfoAsync(getEthDefaultTokenRiskRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Default Volatility &amp; Risk Metrics by Token Returns summary of default volatility and risk metrics for a given token
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthDefaultTokenRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> GetEthDefaultTokenRiskWithHttpInfoAsync(GetEthDefaultTokenRiskRequest getEthDefaultTokenRiskRequest = default(GetEthDefaultTokenRiskRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthDefaultTokenRiskRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthDefaultTokenRisk";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/insights/eth/getDefaultTokenRisk", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthDefaultTokenRisk", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ENS Lookup Returns Ethereum Name Service data for a given wallet address
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthEnsLookupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetEthEnsLookup(GetEthEnsLookupRequest getEthEnsLookupRequest = default(GetEthEnsLookupRequest), int operationIndex = 0)
        {
            GetEthEnsLookupWithHttpInfo(getEthEnsLookupRequest);
        }

        /// <summary>
        /// ENS Lookup Returns Ethereum Name Service data for a given wallet address
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthEnsLookupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> GetEthEnsLookupWithHttpInfo(GetEthEnsLookupRequest getEthEnsLookupRequest = default(GetEthEnsLookupRequest), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthEnsLookupRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthEnsLookup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/data/eth/getEnsLookup", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthEnsLookup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// ENS Lookup Returns Ethereum Name Service data for a given wallet address
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthEnsLookupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetEthEnsLookupAsync(GetEthEnsLookupRequest getEthEnsLookupRequest = default(GetEthEnsLookupRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetEthEnsLookupWithHttpInfoAsync(getEthEnsLookupRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// ENS Lookup Returns Ethereum Name Service data for a given wallet address
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthEnsLookupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> GetEthEnsLookupWithHttpInfoAsync(GetEthEnsLookupRequest getEthEnsLookupRequest = default(GetEthEnsLookupRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthEnsLookupRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthEnsLookup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/data/eth/getEnsLookup", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthEnsLookup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Marketplace Activity by Collection Returns marketplace activity for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthHistoricalEventsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetEthHistoricalEvents(GetEthHistoricalEventsRequest getEthHistoricalEventsRequest = default(GetEthHistoricalEventsRequest), int operationIndex = 0)
        {
            GetEthHistoricalEventsWithHttpInfo(getEthHistoricalEventsRequest);
        }

        /// <summary>
        /// Marketplace Activity by Collection Returns marketplace activity for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthHistoricalEventsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> GetEthHistoricalEventsWithHttpInfo(GetEthHistoricalEventsRequest getEthHistoricalEventsRequest = default(GetEthHistoricalEventsRequest), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthHistoricalEventsRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthHistoricalEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/data/eth/getHistoricalEvents", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthHistoricalEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Marketplace Activity by Collection Returns marketplace activity for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthHistoricalEventsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetEthHistoricalEventsAsync(GetEthHistoricalEventsRequest getEthHistoricalEventsRequest = default(GetEthHistoricalEventsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetEthHistoricalEventsWithHttpInfoAsync(getEthHistoricalEventsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Marketplace Activity by Collection Returns marketplace activity for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthHistoricalEventsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> GetEthHistoricalEventsWithHttpInfoAsync(GetEthHistoricalEventsRequest getEthHistoricalEventsRequest = default(GetEthHistoricalEventsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthHistoricalEventsRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthHistoricalEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/data/eth/getHistoricalEvents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthHistoricalEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Historical Transactions by Collection Returns all transactions for a given collection in bulk
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthHistoricalTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetEthHistoricalTransactions(GetEthHistoricalTransactionsRequest getEthHistoricalTransactionsRequest = default(GetEthHistoricalTransactionsRequest), int operationIndex = 0)
        {
            GetEthHistoricalTransactionsWithHttpInfo(getEthHistoricalTransactionsRequest);
        }

        /// <summary>
        /// Historical Transactions by Collection Returns all transactions for a given collection in bulk
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthHistoricalTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> GetEthHistoricalTransactionsWithHttpInfo(GetEthHistoricalTransactionsRequest getEthHistoricalTransactionsRequest = default(GetEthHistoricalTransactionsRequest), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthHistoricalTransactionsRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthHistoricalTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/data/eth/getHistoricalTransactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthHistoricalTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Historical Transactions by Collection Returns all transactions for a given collection in bulk
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthHistoricalTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetEthHistoricalTransactionsAsync(GetEthHistoricalTransactionsRequest getEthHistoricalTransactionsRequest = default(GetEthHistoricalTransactionsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetEthHistoricalTransactionsWithHttpInfoAsync(getEthHistoricalTransactionsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Historical Transactions by Collection Returns all transactions for a given collection in bulk
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthHistoricalTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> GetEthHistoricalTransactionsWithHttpInfoAsync(GetEthHistoricalTransactionsRequest getEthHistoricalTransactionsRequest = default(GetEthHistoricalTransactionsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthHistoricalTransactionsRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthHistoricalTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/data/eth/getHistoricalTransactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthHistoricalTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ethereum Leaderboard by Collection Returns top collections by volume transaction volume or sales count
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthLeaderBoardRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetEthLeaderBoard(GetEthLeaderBoardRequest getEthLeaderBoardRequest = default(GetEthLeaderBoardRequest), int operationIndex = 0)
        {
            GetEthLeaderBoardWithHttpInfo(getEthLeaderBoardRequest);
        }

        /// <summary>
        /// Ethereum Leaderboard by Collection Returns top collections by volume transaction volume or sales count
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthLeaderBoardRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> GetEthLeaderBoardWithHttpInfo(GetEthLeaderBoardRequest getEthLeaderBoardRequest = default(GetEthLeaderBoardRequest), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthLeaderBoardRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthLeaderBoard";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/analytics/eth/getLeaderBoard", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthLeaderBoard", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ethereum Leaderboard by Collection Returns top collections by volume transaction volume or sales count
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthLeaderBoardRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetEthLeaderBoardAsync(GetEthLeaderBoardRequest getEthLeaderBoardRequest = default(GetEthLeaderBoardRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetEthLeaderBoardWithHttpInfoAsync(getEthLeaderBoardRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Ethereum Leaderboard by Collection Returns top collections by volume transaction volume or sales count
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthLeaderBoardRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> GetEthLeaderBoardWithHttpInfoAsync(GetEthLeaderBoardRequest getEthLeaderBoardRequest = default(GetEthLeaderBoardRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthLeaderBoardRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthLeaderBoard";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/analytics/eth/getLeaderBoard", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthLeaderBoard", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Collection Summary by Marketplace Returns summary statistics for a collection by marketplace
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthMarketplaceDataRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetEthMarketplaceData(GetEthMarketplaceDataRequest getEthMarketplaceDataRequest = default(GetEthMarketplaceDataRequest), int operationIndex = 0)
        {
            GetEthMarketplaceDataWithHttpInfo(getEthMarketplaceDataRequest);
        }

        /// <summary>
        /// Collection Summary by Marketplace Returns summary statistics for a collection by marketplace
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthMarketplaceDataRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> GetEthMarketplaceDataWithHttpInfo(GetEthMarketplaceDataRequest getEthMarketplaceDataRequest = default(GetEthMarketplaceDataRequest), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthMarketplaceDataRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthMarketplaceData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/data/eth/getMarketplaceData", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthMarketplaceData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Collection Summary by Marketplace Returns summary statistics for a collection by marketplace
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthMarketplaceDataRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetEthMarketplaceDataAsync(GetEthMarketplaceDataRequest getEthMarketplaceDataRequest = default(GetEthMarketplaceDataRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetEthMarketplaceDataWithHttpInfoAsync(getEthMarketplaceDataRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Collection Summary by Marketplace Returns summary statistics for a collection by marketplace
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthMarketplaceDataRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> GetEthMarketplaceDataWithHttpInfoAsync(GetEthMarketplaceDataRequest getEthMarketplaceDataRequest = default(GetEthMarketplaceDataRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthMarketplaceDataRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthMarketplaceData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/data/eth/getMarketplaceData", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthMarketplaceData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Marketplace Floor Price by Collection Returns current floor price for all collections by marketplace
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthMarketplaceFloorPriceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetEthMarketplaceFloorPrice(GetEthMarketplaceFloorPriceRequest getEthMarketplaceFloorPriceRequest = default(GetEthMarketplaceFloorPriceRequest), int operationIndex = 0)
        {
            GetEthMarketplaceFloorPriceWithHttpInfo(getEthMarketplaceFloorPriceRequest);
        }

        /// <summary>
        /// Marketplace Floor Price by Collection Returns current floor price for all collections by marketplace
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthMarketplaceFloorPriceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> GetEthMarketplaceFloorPriceWithHttpInfo(GetEthMarketplaceFloorPriceRequest getEthMarketplaceFloorPriceRequest = default(GetEthMarketplaceFloorPriceRequest), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthMarketplaceFloorPriceRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthMarketplaceFloorPrice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/data/eth/getMarketplaceFloorPrice", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthMarketplaceFloorPrice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Marketplace Floor Price by Collection Returns current floor price for all collections by marketplace
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthMarketplaceFloorPriceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetEthMarketplaceFloorPriceAsync(GetEthMarketplaceFloorPriceRequest getEthMarketplaceFloorPriceRequest = default(GetEthMarketplaceFloorPriceRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetEthMarketplaceFloorPriceWithHttpInfoAsync(getEthMarketplaceFloorPriceRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Marketplace Floor Price by Collection Returns current floor price for all collections by marketplace
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthMarketplaceFloorPriceRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> GetEthMarketplaceFloorPriceWithHttpInfoAsync(GetEthMarketplaceFloorPriceRequest getEthMarketplaceFloorPriceRequest = default(GetEthMarketplaceFloorPriceRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthMarketplaceFloorPriceRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthMarketplaceFloorPrice";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/data/eth/getMarketplaceFloorPrice", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthMarketplaceFloorPrice", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Collection Listings by Trait &amp; Marketplace Returns listing statistics for a collection by trait and marketplace
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthMarketplaceTraitDataRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetEthMarketplaceTraitData(GetEthMarketplaceTraitDataRequest getEthMarketplaceTraitDataRequest = default(GetEthMarketplaceTraitDataRequest), int operationIndex = 0)
        {
            GetEthMarketplaceTraitDataWithHttpInfo(getEthMarketplaceTraitDataRequest);
        }

        /// <summary>
        /// Collection Listings by Trait &amp; Marketplace Returns listing statistics for a collection by trait and marketplace
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthMarketplaceTraitDataRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> GetEthMarketplaceTraitDataWithHttpInfo(GetEthMarketplaceTraitDataRequest getEthMarketplaceTraitDataRequest = default(GetEthMarketplaceTraitDataRequest), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthMarketplaceTraitDataRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthMarketplaceTraitData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/data/eth/getMarketplaceTraitData", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthMarketplaceTraitData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Collection Listings by Trait &amp; Marketplace Returns listing statistics for a collection by trait and marketplace
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthMarketplaceTraitDataRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetEthMarketplaceTraitDataAsync(GetEthMarketplaceTraitDataRequest getEthMarketplaceTraitDataRequest = default(GetEthMarketplaceTraitDataRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetEthMarketplaceTraitDataWithHttpInfoAsync(getEthMarketplaceTraitDataRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Collection Listings by Trait &amp; Marketplace Returns listing statistics for a collection by trait and marketplace
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthMarketplaceTraitDataRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> GetEthMarketplaceTraitDataWithHttpInfoAsync(GetEthMarketplaceTraitDataRequest getEthMarketplaceTraitDataRequest = default(GetEthMarketplaceTraitDataRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthMarketplaceTraitDataRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthMarketplaceTraitData";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/data/eth/getMarketplaceTraitData", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthMarketplaceTraitData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Token Rarity by Collection Returns rarity by token for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthRarityRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetEthRarity(GetEthRarityRequest getEthRarityRequest = default(GetEthRarityRequest), int operationIndex = 0)
        {
            GetEthRarityWithHttpInfo(getEthRarityRequest);
        }

        /// <summary>
        /// Token Rarity by Collection Returns rarity by token for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthRarityRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> GetEthRarityWithHttpInfo(GetEthRarityRequest getEthRarityRequest = default(GetEthRarityRequest), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthRarityRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthRarity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/analytics/eth/getRarity", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthRarity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Token Rarity by Collection Returns rarity by token for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthRarityRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetEthRarityAsync(GetEthRarityRequest getEthRarityRequest = default(GetEthRarityRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetEthRarityWithHttpInfoAsync(getEthRarityRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Token Rarity by Collection Returns rarity by token for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthRarityRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> GetEthRarityWithHttpInfoAsync(GetEthRarityRequest getEthRarityRequest = default(GetEthRarityRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthRarityRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthRarity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/analytics/eth/getRarity", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthRarity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Liquidation &amp; Appraisal Estimate by Token Get estimates of appraisal and liquidation values for a set of tokens. The app returns nowcasts by default, but if provided a &#x60;horizon&#x60; and &#x60;frequency&#x60;, it will return forcasts for &#x60;horizon&#x60; periods out at interval &#x60;frequency&#x60;. The app is does not deliver individualized financial advice, but merely provides analytical estimates of token appraisal and liquidation values
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokenAppraisalRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetEthTokenAppraisal(GetEthTokenAppraisalRequest getEthTokenAppraisalRequest = default(GetEthTokenAppraisalRequest), int operationIndex = 0)
        {
            GetEthTokenAppraisalWithHttpInfo(getEthTokenAppraisalRequest);
        }

        /// <summary>
        /// Liquidation &amp; Appraisal Estimate by Token Get estimates of appraisal and liquidation values for a set of tokens. The app returns nowcasts by default, but if provided a &#x60;horizon&#x60; and &#x60;frequency&#x60;, it will return forcasts for &#x60;horizon&#x60; periods out at interval &#x60;frequency&#x60;. The app is does not deliver individualized financial advice, but merely provides analytical estimates of token appraisal and liquidation values
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokenAppraisalRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> GetEthTokenAppraisalWithHttpInfo(GetEthTokenAppraisalRequest getEthTokenAppraisalRequest = default(GetEthTokenAppraisalRequest), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthTokenAppraisalRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthTokenAppraisal";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/insights/eth/getTokenAppraisal", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthTokenAppraisal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Liquidation &amp; Appraisal Estimate by Token Get estimates of appraisal and liquidation values for a set of tokens. The app returns nowcasts by default, but if provided a &#x60;horizon&#x60; and &#x60;frequency&#x60;, it will return forcasts for &#x60;horizon&#x60; periods out at interval &#x60;frequency&#x60;. The app is does not deliver individualized financial advice, but merely provides analytical estimates of token appraisal and liquidation values
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokenAppraisalRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetEthTokenAppraisalAsync(GetEthTokenAppraisalRequest getEthTokenAppraisalRequest = default(GetEthTokenAppraisalRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetEthTokenAppraisalWithHttpInfoAsync(getEthTokenAppraisalRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Liquidation &amp; Appraisal Estimate by Token Get estimates of appraisal and liquidation values for a set of tokens. The app returns nowcasts by default, but if provided a &#x60;horizon&#x60; and &#x60;frequency&#x60;, it will return forcasts for &#x60;horizon&#x60; periods out at interval &#x60;frequency&#x60;. The app is does not deliver individualized financial advice, but merely provides analytical estimates of token appraisal and liquidation values
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokenAppraisalRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> GetEthTokenAppraisalWithHttpInfoAsync(GetEthTokenAppraisalRequest getEthTokenAppraisalRequest = default(GetEthTokenAppraisalRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthTokenAppraisalRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthTokenAppraisal";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/insights/eth/getTokenAppraisal", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthTokenAppraisal", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Price Forecast by Token Returns price, return, and volatility forecast for a given token
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokenForecastsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetEthTokenForecasts(GetEthTokenForecastsRequest getEthTokenForecastsRequest = default(GetEthTokenForecastsRequest), int operationIndex = 0)
        {
            GetEthTokenForecastsWithHttpInfo(getEthTokenForecastsRequest);
        }

        /// <summary>
        /// Price Forecast by Token Returns price, return, and volatility forecast for a given token
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokenForecastsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> GetEthTokenForecastsWithHttpInfo(GetEthTokenForecastsRequest getEthTokenForecastsRequest = default(GetEthTokenForecastsRequest), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthTokenForecastsRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthTokenForecasts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/insights/eth/getTokenForecasts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthTokenForecasts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Price Forecast by Token Returns price, return, and volatility forecast for a given token
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokenForecastsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetEthTokenForecastsAsync(GetEthTokenForecastsRequest getEthTokenForecastsRequest = default(GetEthTokenForecastsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetEthTokenForecastsWithHttpInfoAsync(getEthTokenForecastsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Price Forecast by Token Returns price, return, and volatility forecast for a given token
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokenForecastsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> GetEthTokenForecastsWithHttpInfoAsync(GetEthTokenForecastsRequest getEthTokenForecastsRequest = default(GetEthTokenForecastsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthTokenForecastsRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthTokenForecasts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/insights/eth/getTokenForecasts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthTokenForecasts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Summary Statistics by Token Returns summary analytics for a given token
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokenSummaryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetEthTokenSummary(GetEthTokenSummaryRequest getEthTokenSummaryRequest = default(GetEthTokenSummaryRequest), int operationIndex = 0)
        {
            GetEthTokenSummaryWithHttpInfo(getEthTokenSummaryRequest);
        }

        /// <summary>
        /// Summary Statistics by Token Returns summary analytics for a given token
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokenSummaryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> GetEthTokenSummaryWithHttpInfo(GetEthTokenSummaryRequest getEthTokenSummaryRequest = default(GetEthTokenSummaryRequest), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthTokenSummaryRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthTokenSummary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/analytics/eth/getTokenSummary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthTokenSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Summary Statistics by Token Returns summary analytics for a given token
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokenSummaryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetEthTokenSummaryAsync(GetEthTokenSummaryRequest getEthTokenSummaryRequest = default(GetEthTokenSummaryRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetEthTokenSummaryWithHttpInfoAsync(getEthTokenSummaryRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Summary Statistics by Token Returns summary analytics for a given token
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokenSummaryRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> GetEthTokenSummaryWithHttpInfoAsync(GetEthTokenSummaryRequest getEthTokenSummaryRequest = default(GetEthTokenSummaryRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthTokenSummaryRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthTokenSummary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/analytics/eth/getTokenSummary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthTokenSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transactions by Token Returns all transactions for a given token
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokenTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetEthTokenTransactions(GetEthTokenTransactionsRequest getEthTokenTransactionsRequest = default(GetEthTokenTransactionsRequest), int operationIndex = 0)
        {
            GetEthTokenTransactionsWithHttpInfo(getEthTokenTransactionsRequest);
        }

        /// <summary>
        /// Transactions by Token Returns all transactions for a given token
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokenTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> GetEthTokenTransactionsWithHttpInfo(GetEthTokenTransactionsRequest getEthTokenTransactionsRequest = default(GetEthTokenTransactionsRequest), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthTokenTransactionsRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthTokenTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/data/eth/getTokenTransactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthTokenTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transactions by Token Returns all transactions for a given token
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokenTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetEthTokenTransactionsAsync(GetEthTokenTransactionsRequest getEthTokenTransactionsRequest = default(GetEthTokenTransactionsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetEthTokenTransactionsWithHttpInfoAsync(getEthTokenTransactionsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Transactions by Token Returns all transactions for a given token
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokenTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> GetEthTokenTransactionsWithHttpInfoAsync(GetEthTokenTransactionsRequest getEthTokenTransactionsRequest = default(GetEthTokenTransactionsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthTokenTransactionsRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthTokenTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/data/eth/getTokenTransactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthTokenTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Tokens by Collection Returns all tokens for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokensRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetEthTokens(GetEthTokensRequest getEthTokensRequest = default(GetEthTokensRequest), int operationIndex = 0)
        {
            GetEthTokensWithHttpInfo(getEthTokensRequest);
        }

        /// <summary>
        /// Tokens by Collection Returns all tokens for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokensRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> GetEthTokensWithHttpInfo(GetEthTokensRequest getEthTokensRequest = default(GetEthTokensRequest), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthTokensRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthTokens";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/data/eth/getTokens", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthTokens", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Tokens by Collection Returns all tokens for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokensRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetEthTokensAsync(GetEthTokensRequest getEthTokensRequest = default(GetEthTokensRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetEthTokensWithHttpInfoAsync(getEthTokensRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Tokens by Collection Returns all tokens for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthTokensRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> GetEthTokensWithHttpInfoAsync(GetEthTokensRequest getEthTokensRequest = default(GetEthTokensRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthTokensRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthTokens";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/data/eth/getTokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthTokens", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Wallet Activity Labels Classifies a wallet&#39;s behaviour according to its on-chain activity
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWalletLabelsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetEthWalletLabels(GetEthWalletLabelsRequest getEthWalletLabelsRequest = default(GetEthWalletLabelsRequest), int operationIndex = 0)
        {
            GetEthWalletLabelsWithHttpInfo(getEthWalletLabelsRequest);
        }

        /// <summary>
        /// Wallet Activity Labels Classifies a wallet&#39;s behaviour according to its on-chain activity
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWalletLabelsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> GetEthWalletLabelsWithHttpInfo(GetEthWalletLabelsRequest getEthWalletLabelsRequest = default(GetEthWalletLabelsRequest), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthWalletLabelsRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthWalletLabels";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/insights/eth/getWalletLabels", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthWalletLabels", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Wallet Activity Labels Classifies a wallet&#39;s behaviour according to its on-chain activity
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWalletLabelsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetEthWalletLabelsAsync(GetEthWalletLabelsRequest getEthWalletLabelsRequest = default(GetEthWalletLabelsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetEthWalletLabelsWithHttpInfoAsync(getEthWalletLabelsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Wallet Activity Labels Classifies a wallet&#39;s behaviour according to its on-chain activity
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWalletLabelsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> GetEthWalletLabelsWithHttpInfoAsync(GetEthWalletLabelsRequest getEthWalletLabelsRequest = default(GetEthWalletLabelsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthWalletLabelsRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthWalletLabels";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/insights/eth/getWalletLabels", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthWalletLabels", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Tokens Owned by Wallet Returns all tokens owned for a given wallet
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWalletNFTsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetEthWalletNFTs(GetEthWalletNFTsRequest getEthWalletNFTsRequest = default(GetEthWalletNFTsRequest), int operationIndex = 0)
        {
            GetEthWalletNFTsWithHttpInfo(getEthWalletNFTsRequest);
        }

        /// <summary>
        /// Tokens Owned by Wallet Returns all tokens owned for a given wallet
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWalletNFTsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> GetEthWalletNFTsWithHttpInfo(GetEthWalletNFTsRequest getEthWalletNFTsRequest = default(GetEthWalletNFTsRequest), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthWalletNFTsRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthWalletNFTs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/data/eth/getWalletNFTs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthWalletNFTs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Tokens Owned by Wallet Returns all tokens owned for a given wallet
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWalletNFTsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetEthWalletNFTsAsync(GetEthWalletNFTsRequest getEthWalletNFTsRequest = default(GetEthWalletNFTsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetEthWalletNFTsWithHttpInfoAsync(getEthWalletNFTsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Tokens Owned by Wallet Returns all tokens owned for a given wallet
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWalletNFTsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> GetEthWalletNFTsWithHttpInfoAsync(GetEthWalletNFTsRequest getEthWalletNFTsRequest = default(GetEthWalletNFTsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthWalletNFTsRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthWalletNFTs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/data/eth/getWalletNFTs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthWalletNFTs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Historical Token Transactions by Wallet Returns all historical token transactions for a given wallet
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWalletTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetEthWalletTransactions(GetEthWalletTransactionsRequest getEthWalletTransactionsRequest = default(GetEthWalletTransactionsRequest), int operationIndex = 0)
        {
            GetEthWalletTransactionsWithHttpInfo(getEthWalletTransactionsRequest);
        }

        /// <summary>
        /// Historical Token Transactions by Wallet Returns all historical token transactions for a given wallet
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWalletTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> GetEthWalletTransactionsWithHttpInfo(GetEthWalletTransactionsRequest getEthWalletTransactionsRequest = default(GetEthWalletTransactionsRequest), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthWalletTransactionsRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthWalletTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/data/eth/getWalletTransactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthWalletTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Historical Token Transactions by Wallet Returns all historical token transactions for a given wallet
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWalletTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetEthWalletTransactionsAsync(GetEthWalletTransactionsRequest getEthWalletTransactionsRequest = default(GetEthWalletTransactionsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetEthWalletTransactionsWithHttpInfoAsync(getEthWalletTransactionsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Historical Token Transactions by Wallet Returns all historical token transactions for a given wallet
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWalletTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> GetEthWalletTransactionsWithHttpInfoAsync(GetEthWalletTransactionsRequest getEthWalletTransactionsRequest = default(GetEthWalletTransactionsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthWalletTransactionsRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthWalletTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/data/eth/getWalletTransactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthWalletTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Value All Tokens Owned by Wallet Returns valuation of all tokens owned for a given wallet
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPolWalletNFTsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetEthWalletValuation(GetPolWalletNFTsRequest getPolWalletNFTsRequest = default(GetPolWalletNFTsRequest), int operationIndex = 0)
        {
            GetEthWalletValuationWithHttpInfo(getPolWalletNFTsRequest);
        }

        /// <summary>
        /// Value All Tokens Owned by Wallet Returns valuation of all tokens owned for a given wallet
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPolWalletNFTsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> GetEthWalletValuationWithHttpInfo(GetPolWalletNFTsRequest getPolWalletNFTsRequest = default(GetPolWalletNFTsRequest), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getPolWalletNFTsRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthWalletValuation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/insights/eth/getWalletValuation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthWalletValuation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Value All Tokens Owned by Wallet Returns valuation of all tokens owned for a given wallet
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPolWalletNFTsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetEthWalletValuationAsync(GetPolWalletNFTsRequest getPolWalletNFTsRequest = default(GetPolWalletNFTsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetEthWalletValuationWithHttpInfoAsync(getPolWalletNFTsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Value All Tokens Owned by Wallet Returns valuation of all tokens owned for a given wallet
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getPolWalletNFTsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> GetEthWalletValuationWithHttpInfoAsync(GetPolWalletNFTsRequest getPolWalletNFTsRequest = default(GetPolWalletNFTsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getPolWalletNFTsRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthWalletValuation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/insights/eth/getWalletValuation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthWalletValuation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Wash Trades by Transaction Returns suspected wash trades for a given transaction hash
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWashTradeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetEthWashTrade(GetEthWashTradeRequest getEthWashTradeRequest = default(GetEthWashTradeRequest), int operationIndex = 0)
        {
            GetEthWashTradeWithHttpInfo(getEthWashTradeRequest);
        }

        /// <summary>
        /// Wash Trades by Transaction Returns suspected wash trades for a given transaction hash
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWashTradeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> GetEthWashTradeWithHttpInfo(GetEthWashTradeRequest getEthWashTradeRequest = default(GetEthWashTradeRequest), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthWashTradeRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthWashTrade";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/analytics/eth/getWashTrade", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthWashTrade", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Wash Trades by Transaction Returns suspected wash trades for a given transaction hash
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWashTradeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetEthWashTradeAsync(GetEthWashTradeRequest getEthWashTradeRequest = default(GetEthWashTradeRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetEthWashTradeWithHttpInfoAsync(getEthWashTradeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Wash Trades by Transaction Returns suspected wash trades for a given transaction hash
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWashTradeRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> GetEthWashTradeWithHttpInfoAsync(GetEthWashTradeRequest getEthWashTradeRequest = default(GetEthWashTradeRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthWashTradeRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthWashTrade";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/analytics/eth/getWashTrade", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthWashTrade", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Wash Trades by Collection Returns suspected wash trades by token for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWashTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetEthWashTransactions(GetEthWashTransactionsRequest getEthWashTransactionsRequest = default(GetEthWashTransactionsRequest), int operationIndex = 0)
        {
            GetEthWashTransactionsWithHttpInfo(getEthWashTransactionsRequest);
        }

        /// <summary>
        /// Wash Trades by Collection Returns suspected wash trades by token for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWashTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> GetEthWashTransactionsWithHttpInfo(GetEthWashTransactionsRequest getEthWashTransactionsRequest = default(GetEthWashTransactionsRequest), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthWashTransactionsRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthWashTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/analytics/eth/getWashTransactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthWashTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Wash Trades by Collection Returns suspected wash trades by token for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWashTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetEthWashTransactionsAsync(GetEthWashTransactionsRequest getEthWashTransactionsRequest = default(GetEthWashTransactionsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetEthWashTransactionsWithHttpInfoAsync(getEthWashTransactionsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Wash Trades by Collection Returns suspected wash trades by token for a given collection
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getEthWashTransactionsRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> GetEthWashTransactionsWithHttpInfoAsync(GetEthWashTransactionsRequest getEthWashTransactionsRequest = default(GetEthWashTransactionsRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getEthWashTransactionsRequest;

            localVarRequestOptions.Operation = "EthereumApi.GetEthWashTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (api_key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/analytics/eth/getWashTransactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEthWashTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
