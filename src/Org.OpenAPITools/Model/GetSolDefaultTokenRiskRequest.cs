/*
 * Gallop API
 *
 * Data and insights APIs, webooks, and dashboards enabling businesses to launch tokenized products in seconds.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@higallop.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GetSolDefaultTokenRiskRequest
    /// </summary>
    [DataContract(Name = "getSolDefaultTokenRisk_request")]
    public partial class GetSolDefaultTokenRiskRequest : IEquatable<GetSolDefaultTokenRiskRequest>, IValidatableObject
    {
        /// <summary>
        /// The currency to report results in
        /// </summary>
        /// <value>The currency to report results in</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReptCurrEnum
        {
            /// <summary>
            /// Enum Sol for value: sol
            /// </summary>
            [EnumMember(Value = "sol")]
            Sol = 1,

            /// <summary>
            /// Enum Usd for value: usd
            /// </summary>
            [EnumMember(Value = "usd")]
            Usd = 2

        }


        /// <summary>
        /// The currency to report results in
        /// </summary>
        /// <value>The currency to report results in</value>
        [DataMember(Name = "rept_curr", EmitDefaultValue = false)]
        public ReptCurrEnum? ReptCurr { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSolDefaultTokenRiskRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetSolDefaultTokenRiskRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSolDefaultTokenRiskRequest" /> class.
        /// </summary>
        /// <param name="mintAddress">A token mint address or list of mint addresses. (required).</param>
        /// <param name="holdingPeriod">The holding period to evaluate risk for, e.g. &#39;12M&#39; (required).</param>
        /// <param name="reptCurr">The currency to report results in.</param>
        /// <param name="drawdown">If true, report drawdown volatility (based on negative returns only)..</param>
        public GetSolDefaultTokenRiskRequest(List<string> mintAddress = default(List<string>), string holdingPeriod = default(string), ReptCurrEnum? reptCurr = default(ReptCurrEnum?), bool drawdown = default(bool))
        {
            // to ensure "mintAddress" is required (not null)
            if (mintAddress == null)
            {
                throw new ArgumentNullException("mintAddress is a required property for GetSolDefaultTokenRiskRequest and cannot be null");
            }
            this.MintAddress = mintAddress;
            // to ensure "holdingPeriod" is required (not null)
            if (holdingPeriod == null)
            {
                throw new ArgumentNullException("holdingPeriod is a required property for GetSolDefaultTokenRiskRequest and cannot be null");
            }
            this.HoldingPeriod = holdingPeriod;
            this.ReptCurr = reptCurr;
            this.Drawdown = drawdown;
        }

        /// <summary>
        /// A token mint address or list of mint addresses.
        /// </summary>
        /// <value>A token mint address or list of mint addresses.</value>
        [DataMember(Name = "mint_address", IsRequired = true, EmitDefaultValue = true)]
        public List<string> MintAddress { get; set; }

        /// <summary>
        /// The holding period to evaluate risk for, e.g. &#39;12M&#39;
        /// </summary>
        /// <value>The holding period to evaluate risk for, e.g. &#39;12M&#39;</value>
        [DataMember(Name = "holding_period", IsRequired = true, EmitDefaultValue = true)]
        public string HoldingPeriod { get; set; }

        /// <summary>
        /// If true, report drawdown volatility (based on negative returns only).
        /// </summary>
        /// <value>If true, report drawdown volatility (based on negative returns only).</value>
        [DataMember(Name = "drawdown", EmitDefaultValue = true)]
        public bool Drawdown { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSolDefaultTokenRiskRequest {\n");
            sb.Append("  MintAddress: ").Append(MintAddress).Append("\n");
            sb.Append("  HoldingPeriod: ").Append(HoldingPeriod).Append("\n");
            sb.Append("  ReptCurr: ").Append(ReptCurr).Append("\n");
            sb.Append("  Drawdown: ").Append(Drawdown).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetSolDefaultTokenRiskRequest);
        }

        /// <summary>
        /// Returns true if GetSolDefaultTokenRiskRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of GetSolDefaultTokenRiskRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetSolDefaultTokenRiskRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MintAddress == input.MintAddress ||
                    this.MintAddress != null &&
                    input.MintAddress != null &&
                    this.MintAddress.SequenceEqual(input.MintAddress)
                ) && 
                (
                    this.HoldingPeriod == input.HoldingPeriod ||
                    (this.HoldingPeriod != null &&
                    this.HoldingPeriod.Equals(input.HoldingPeriod))
                ) && 
                (
                    this.ReptCurr == input.ReptCurr ||
                    this.ReptCurr.Equals(input.ReptCurr)
                ) && 
                (
                    this.Drawdown == input.Drawdown ||
                    this.Drawdown.Equals(input.Drawdown)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MintAddress != null)
                {
                    hashCode = (hashCode * 59) + this.MintAddress.GetHashCode();
                }
                if (this.HoldingPeriod != null)
                {
                    hashCode = (hashCode * 59) + this.HoldingPeriod.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ReptCurr.GetHashCode();
                hashCode = (hashCode * 59) + this.Drawdown.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
